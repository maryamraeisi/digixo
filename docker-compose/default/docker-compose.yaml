services:

  read:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observe/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      microservice:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observe/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ../observe/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    networks:
      - microservice

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000:9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - microservice

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observe/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice

  prometheus:
    image: prom/prometheus:latest
    #    network_mode: host
    #    extra_hosts:
    #      - "host.docker.internal:host-gateway"
    container_name: prometheus
    volumes:
      - ../observe/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    #      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservice

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=digixo
    volumes:
      - digixo:/var/lib/postgresql/data
    networks:
      - microservice


  eureka:
    image: digixo/eureka:mine
    container_name: eureka
    ports:
      - "8761:8761"
    deploy:
      resources:
        limits:
          memory: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservice


  product:
    image: digixo/product:mine
    container_name: product
    ports:
      - "8080:8080"
    deploy:
      resources:
        limits:
          memory: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
       - eureka
       - postgres
    networks:
      - microservice


  discount:
    image: digixo/discount:mine
    container_name: discount
    ports:
      - "8085:8085"
    deploy:
      resources:
        limits:
          memory: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka
      - postgres
    networks:
      - microservice


  notification:
    image: digixo/notification:mine
    container_name: notification
    ports:
      - "8082:8082"
    deploy:
      resources:
        limits:
          memory: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka
      - postgres
    networks:
      - microservice


  apigateway:
    image: digixo/apigateway:mine
    container_name: apigateway
    ports:
      - "7070:7070"
    deploy:
      resources:
        limits:
          memory: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka
    networks:
      - microservice

volumes:
  digixo:
    name: digixo
    driver: local
networks:
  default:
  microservice:
    driver: bridge